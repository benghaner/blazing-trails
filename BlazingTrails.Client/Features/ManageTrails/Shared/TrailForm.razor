@using BlazingTrails.Client.Validation

<EditForm EditContext="_editContext" OnValidSubmit="SubmitForm">
    <FluentValidationValidator/>

    <FormSection Title="Basic Details"
                 HelpText="This information can be used to identify the trail and can be searched to help hikers find it.">

        <FormControlSet Width="col-6">
            <label for="trailName" class="form-label">Name</label>
            <InputText @bind-Value="_trail.Name" class="form-control" id="trailName"/>
            <ValidationMessage For="() => _trail.Name"/>
        </FormControlSet>

        <FormControlSet>
            <label for="trailDescription" class="form-label">Description</label>
            <InputTextArea @bind-Value="_trail.Description" rows="6" class="form-control" id="trailDescription"/>
            <ValidationMessage For="() => _trail.Description"/>
        </FormControlSet>

        <FormControlSet Width="col-6">
            <label for="trailLocation" class="form-label">Location</label>
            <InputText @bind-Value="_trail.Location" class="form-control" id="trailLocation"/>
            <ValidationMessage For="() => _trail.Location"/>
        </FormControlSet>

    </FormSection>

    <FormSection Title="Difficulty"
                 HelpText="Help other hikers out by telling them the length of the trail is how long it might take them.">

        <FormControlSet Width="col-3">
            <label for="trailLength" class="form-label">Length (km)</label>
            <InputNumber @bind-Value="_trail.Length" class="form-control" id="trailLength"/>
            <ValidationMessage For="() => _trail.Length"/>
        </FormControlSet>

        <FormControlSet Width="col-5">
            <label for="trailTime" class="form-label">Time</label>
            <InputTime @bind-Value="_trail.TimeInMinutes" id="trailTime"/>
            <ValidationMessage For="() => _trail.TimeInMinutes"/>
        </FormControlSet>

    </FormSection>

    <FormSection Title="Route Instructions"
                 HelpText="Route instructions are a guide for the trail. This helps hikers new to the trail stay on track.">

        @{ var i = 0; }
        @foreach (var routeInstruction in _trail.Route)
        {
            i++;
            routeInstruction.Stage = i;

            <label for="routeInstructionDescription" class="form-label" hidden="@(i > 1)">Stage</label>
            <div class="input-group mb-2">
                <span class="input-group-text">@routeInstruction.Stage</span>
                <InputText @bind-Value="routeInstruction.Description"
                           class="form-control"
                           placeholder="@(i == 1 ? "Description..." : "")"
                           id="routeInstructionDescription"/>
                <button type="button"
                        class="btn btn-outline-danger"
                        @onclick="() => _trail.Route.Remove(routeInstruction)">
                    <i class="bi bi-trash3"/>
                </button>
            </div>
            <ValidationMessage For="() => routeInstruction.Description"/>
        }

        <div class="row">
            <div class="col">
                <button class="btn btn-outline-primary"
                        type="button"
                        @onclick="() => _trail.Route.Add(new TrailDto.RouteInstruction())">
                    Add Instruction
                </button>
                <ValidationMessage For="() => _trail.Route"/>
            </div>
        </div>
    </FormSection>

    <div class="mt-4 mb-5">
        <div class="row">
            <div>
                <button class="btn btn-primary" type="submit">Submit</button>
                <button class="btn btn-outline-secondary" type="button" @onclick="() => _trail = new TrailDto()">Reset</button>
            </div>
        </div>
    </div>
</EditForm>

@code {

    [Parameter]
    public Func<TrailDto, Task> OnSubmit { get; set; }

    private TrailDto _trail = new();
    private EditContext _editContext = default!;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_trail);
        _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    }

    public void ResetForm()
    {
        _trail = new TrailDto();
        _editContext = new EditContext(_trail);
        _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    }

    private async Task SubmitForm() => await OnSubmit(_trail);

}