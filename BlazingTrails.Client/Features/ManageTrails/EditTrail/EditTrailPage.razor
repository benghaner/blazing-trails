@page "/edit-trail/{TrailId:int}"
@using BlazingTrails.Shared.Features.ManageTrails.Shared
@using BlazingTrails.Shared.Features.ManageTrails.EditTrail
@inject IMediator Mediator

<PageTitle>Edit Trail - Blazing Trails</PageTitle>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/">Home</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">Edit Trail</li>
    </ol>
</nav>

@if (_isLoading)
{
    <p>Loading trail...</p>
}
else
{
    <h3 class="mb-3">Editing trail: @_trail.Name</h3>

    @if (_submitSuccessful)
    {
        <SuccessAlert Message="Your trail has been edited successfully!"/>
    }
    else
    {
        <ErrorAlert Message="@_errorMessage"/>
    }

    <TrailForm Trail="_trail" OnSubmit="SubmitEditTrail"></TrailForm>
}

@code {

    [Parameter]
    public int TrailId { get; set; }

    private bool _isLoading;
    private bool _submitSuccessful;
    private string? _errorMessage;
    private readonly TrailDto _trail = new TrailDto();

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        var response = await Mediator.Send(new GetTrailRequest(TrailId));

        if (response is not null)
        {
            _trail.Id = TrailId;
            _trail.Name = response.Trail.Name;
            _trail.Description = response.Trail.Description;
            _trail.Location = response.Trail.Location;
            _trail.Length = response.Trail.Length;
            _trail.TimeInMinutes = response.Trail.TimeInMinutes;
            _trail.Route.Clear();
            _trail.Route.AddRange(response.Trail.RouteInstructions.Select(ri => new TrailDto.RouteInstruction
            {
                Stage = ri.Stage,
                Description = ri.Description
            }));
        }
        else
        {
            _errorMessage = "There was a problem loading the trail.";
        }

        _isLoading = false;
    }

    private async Task SubmitEditTrail(TrailDto trail)
    {
        var response = await Mediator.Send(new EditTrailRequest(trail));

        if (!response.IsSuccess)
        {
            _submitSuccessful = false;
            _errorMessage = "There was a problem saving your trail.";
        }
        else
        {
            _trail.Name = trail.Name;
            _trail.Description = trail.Description;
            _trail.Location = trail.Location;
            _trail.Length = trail.Length;
            _trail.TimeInMinutes = trail.TimeInMinutes;
            _trail.Route.AddRange(trail.Route.Select(ri => new TrailDto.RouteInstruction
            {
                Stage = ri.Stage,
                Description = ri.Description
            }));

            _submitSuccessful = true;
        }

        StateHasChanged();
    }

}